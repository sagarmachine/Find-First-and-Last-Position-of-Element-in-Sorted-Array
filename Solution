

class Solution {
int n[],t,k;
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0)
            return new int []{-1,-1};
        System.out.println("76");
  n=nums;
  t=target;
int i[]=new int[2];
        i[0]=first(0,nums.length-1);
        i[1]=last(0,nums.length-1);
   return i;     
   
}
  int first(int l,int h){
      
   if(l>h)
       return -1;
      int mid=(l+h)/2;
    if(n[mid]>t)
        h=mid-1;
    else if(n[mid]<t)
        l=mid+1;
    else if(n[mid]==t){k++;
        if(mid>=1&&n[mid-1]==t)
        {mid= first(l,mid-1);
        return mid;}
        else
        return mid;
       
  }
   mid= first(l,h);

   return mid; 

  } 
  int last(int l,int h){
       if(l>h)return -1;
    int mid=(l+h)/2;
    if(n[mid]>t)
        h=mid-1;
    else if(n[mid]<t)
        l=mid+1;
    else if(n[mid]==t){k=0;
        if(mid<n.length-1 && n[mid+1]==t)
        {mid= last(mid+1,h);
        return mid;}
        else
        return mid;
       
  }
   mid= last(l,h);
   return mid; 

  }
}

